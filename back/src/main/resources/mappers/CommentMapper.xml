<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gclogs.armyreportsystem.report.mapper.CommentMapper">

    <!-- Comment 객체를 위한 resultMap 정의 -->
    <resultMap id="commentResultMap" type="com.gclogs.armyreportsystem.report.domain.Comment">
        <id property="commentId" column="comment_id" />
        <result property="reportId" column="report_id" />
        <result property="authorId" column="author_id" />
        <result property="authorName" column="author_name" />
        <result property="authorRank" column="author_rank" />
        <result property="content" column="content" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="isDeleted" column="is_deleted" />
    </resultMap>

    <!-- 댓글 저장 -->
    <insert id="createComment" parameterType="com.gclogs.armyreportsystem.report.domain.Comment">
        INSERT INTO report_comments (
            comment_id,
            report_id,
            author_id,
            author_name,
            author_rank,
            content,
            created_at,
            updated_at,
            is_deleted
        ) VALUES (
            #{commentId},
            #{reportId},
            #{authorId},
            #{authorName},
            #{authorRank},
            #{content},
            #{createdAt},
            #{updatedAt},
            #{isDeleted}
        )
    </insert>

    <!-- 특정 리포트의 모든 댓글 조회 -->
    <select id="findCommentsByReportId" resultMap="commentResultMap">
        SELECT
            c.comment_id,
            c.report_id,
            c.author_id,
            c.author_name,
            c.content,
            c.created_at,
            c.updated_at,
            c.is_deleted
        FROM
            report_comments c
        LEFT JOIN
            user u ON c.author_id = u.user_id COLLATE utf8mb4_unicode_ci
        WHERE
            c.report_id = #{reportId}
        ORDER BY
            c.created_at ASC
    </select>

    <!-- 댓글 ID로 단일 댓글 조회 -->
    <select id="findCommentById" resultMap="commentResultMap">
        SELECT
            c.comment_id,
            c.report_id,
            c.author_id,
            c.author_name,
            c.content,
            c.created_at,
            c.updated_at,
            c.is_deleted,
            u.name,
            u.rank
        FROM
            report_comments c
        LEFT JOIN
            user u ON c.author_id = u.user_id COLLATE utf8mb4_unicode_ci
        WHERE
            c.comment_id = #{commentId}
    </select>

    <!-- 댓글 수정 -->
    <update id="updateComment" parameterType="com.gclogs.armyreportsystem.report.domain.Comment">
        UPDATE report_comments
        SET
            content = #{content},
            updated_at = #{updatedAt}
        WHERE
            comment_id = #{commentId}
    </update>

    <!-- 댓글 삭제 (논리적 삭제) -->
    <update id="deleteComment">
        UPDATE report_comments
        SET
            is_deleted = true,
            updated_at = CURRENT_TIMESTAMP
        WHERE
            comment_id = #{commentId}
    </update>

    <!-- 리포트 ID로 댓글 수 조회 -->
    <select id="countByReportId" resultType="int">
        SELECT
            COUNT(*)
        FROM
            report_comments
        WHERE
            report_id = #{reportId}
            AND is_deleted = false
    </select>

    <!-- 리포트 ID로 댓글 삭제 (리포트 삭제 시 관련 댓글 모두 삭제) -->
    <update id="deleteAllByReportId">
        UPDATE report_comments
        SET
            is_deleted = true,
            updated_at = CURRENT_TIMESTAMP
        WHERE
            report_id = #{reportId}
    </update>

</mapper>